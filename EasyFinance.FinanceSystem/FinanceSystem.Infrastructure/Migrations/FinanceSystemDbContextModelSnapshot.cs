// <auto-generated />
using System;
using FinanceSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceSystem.Infrastructure.Migrations
{
    [DbContext(typeof(FinanceSystemDbContext))]
    partial class FinanceSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("FinanceSystem.Domain.BankAccountAggregate.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Balance")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("FinanceSystem.Domain.ExpenseAggregate.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DuePaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Paid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Recurrent")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("FinanceSystem.Domain.IncomeAggregate.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpectedReceiptDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiptDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Received")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Recurrent")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Incomes", (string)null);
                });

            modelBuilder.Entity("FinanceSystem.Domain.BankAccountAggregate.BankAccount", b =>
                {
                    b.OwnsMany("FinanceSystem.Domain.BankAccountAggregate.Entities.FinancialTransaction", "FinancialTransactions", b1 =>
                        {
                            b1.Property<Guid>("BankAccountId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("CreationDate")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("ExpenseId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid?>("IncomeId")
                                .HasColumnType("TEXT");

                            b1.HasKey("BankAccountId", "Id");

                            b1.HasIndex("ExpenseId")
                                .IsUnique();

                            b1.HasIndex("IncomeId")
                                .IsUnique();

                            b1.ToTable("FinancialTransactions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");

                            b1.HasOne("FinanceSystem.Domain.ExpenseAggregate.Expense", null)
                                .WithOne()
                                .HasForeignKey("FinanceSystem.Domain.BankAccountAggregate.BankAccount.FinancialTransactions#FinanceSystem.Domain.BankAccountAggregate.Entities.FinancialTransaction", "ExpenseId");

                            b1.HasOne("FinanceSystem.Domain.IncomeAggregate.Income", null)
                                .WithOne()
                                .HasForeignKey("FinanceSystem.Domain.BankAccountAggregate.BankAccount.FinancialTransactions#FinanceSystem.Domain.BankAccountAggregate.Entities.FinancialTransaction", "IncomeId");
                        });

                    b.Navigation("FinancialTransactions");
                });

            modelBuilder.Entity("FinanceSystem.Domain.ExpenseAggregate.Expense", b =>
                {
                    b.OwnsMany("FinanceSystem.Domain.ExpenseAggregate.Entities.Payment", "Payments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("ExpenseId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("PaymentDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("ExpenseId");

                            b1.ToTable("Payments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ExpenseId");
                        });

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
